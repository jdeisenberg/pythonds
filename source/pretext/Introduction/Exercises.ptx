<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="introduction_exercises">
  <title>Introduction: Exercises</title>
  <exercises>

        <exercise><p>Construct a class hierarchy for people on a college campus. Include
   faculty, staff, and students. What do they have in common? What
   distinguishes them from one another?</p></exercise>

        <exercise><p>Construct a class hierarchy for bank accounts.</p></exercise>


        <exercise><p>Construct a class hierarchy for different types of computers.</p></exercise>

        <exercise><p>Using the classes provided in the chapter, interactively construct a
                circuit and test it.</p></exercise>

        <exercise><p>Implement the simple methods <c>get_num</c> and <c>get_den</c> that will
                return the numerator and denominator of a fraction.</p></exercise>

        <exercise><p>In many ways it would be better if all fractions were maintained in
    lowest terms right from the start. Modify the constructor for the
    <c>Fraction</c> class so that <c>GCD</c> is used to reduce fractions
    immediately. Notice that this means the <c>__add__</c> function no
    longer needs to reduce. Make the necessary modifications.</p></exercise>

    <exercise><p>Implement the remaining simple arithmetic operators (<c>__sub__</c>,
            <c>__mul__</c>, and <c>__truediv__</c>).</p></exercise>

    <exercise><p>Implement the remaining relational operators (<c>__gt__</c>,
            <c>__ge__</c>, <c>__lt__</c>, <c>__le__</c>, and <c>__ne__</c>).</p></exercise>

    <exercise><p>Modify the constructor for the fraction class so that it checks to
    make sure that the numerator and denominator are both integers. If
    either is not an integer, the constructor should raise an exception.</p></exercise>

    <exercise><p>In the definition of fractions we assumed that negative fractions
    have a negative numerator and a positive denominator. Using a
    negative denominator would cause some of the relational operators to
    give incorrect results. In general, this is an unnecessary
    constraint. Modify the constructor to allow the user to pass a
    negative denominator so that all of the operators continue to work
    properly.</p></exercise>

    <exercise><p>Research the <c>__radd__</c> method. How does it differ from
            <c>__add__</c>? When is it used? Implement <c>__radd__</c>.</p></exercise>

    <exercise><p>Repeat the last question but this time consider the <c>__iadd__</c>
            method.</p></exercise>

    <exercise><p>Research the <c>__repr__</c> method. How does it differ from
            <c>__str__</c>? When is it used? Implement <c>__repr__</c>.</p></exercise>

    <exercise><p>Research other types of gates that exist (such as NAND, NOR, and
    XOR). Add them to the circuit hierarchy. How much additional coding
    did you need to do?</p></exercise>

    <exercise><p>The most simple arithmetic circuit is known as the half adder.
            Research the simple half-adder circuit. Implement this circuit.</p></exercise>


    <exercise><p>Now extend that circuit and implement an 8-bit full adder.</p></exercise>

    <exercise><p>The circuit simulation shown in this chapter works in a backward
    direction. In other words, given a circuit, the output is produced by
    working back through the input values, which in turn cause other
    outputs to be queried. This continues until external input lines are
    found, at which point the user is asked for values. Modify the
    implementation so that the action is in the forward direction; upon
    receiving inputs the circuit produces an output.</p></exercise>

    <exercise><p>Design a class to represent a playing card and another one to represent a deck of cards.
            Using these two classes, implement your favorite card game.</p></exercise>

    <exercise><p>Find a Sudoku puzzle online or in the local newspaper. Write a program to solve
            the puzzle.</p></exercise>
</exercises>
</section>
